# function, input: A list, element to access i
# output: ith column of A
def column(A, i):                  
    return [sublist[i] for sublist in A]   # list comprehension
    
    
print(column(A, 0))                 # 1st element of each sublist 


def row(A, i):
    x = [A[j] for j in range(len(A)) if j == i]
    return x[0]

print(row(A, 0))                    # first sublist of A



# input: list of lists
# output: if the list can be realized as a matrix (string)
def matrix(A):
    n = len(A)                      # n is the number of sublists in A
    x = [0] * (n - 1)               # x is a list of n - 1 zeros
                                    
                                    # loop to compare length of 1st sublist to every other sublist
    for j in range(1, n):           # j goes from 1, 2, ..., n - 1
        if len(A[0]) == len(A[j]):  # compare 
            x[j - 1] = 1            # store value 1 into (j - 1)st entry of list x
            
                                    # loop to count number of entries that are 1
    counter = 0                     # intiailze a counter
    for j in range(n - 1):              # j goes from 0, 1, ..., n - 1
        counter = counter + x[j]    # store counter plus x[j] into counter 
                                    # end loop
                                    
        
    if counter == n - 1:                # if total number of equal length sublists in x                                              # is the number of sublists of A
        return A, "can be realized as matrix"
    else:               
        return A, "cannot be realized as a matrix"






def detect_list(L):
    if len(L) != 1:
        for i in range(len(L)):             # every sublist of L
            x = L[i]                        # x is ith subslist of L
            for j in range(len(x)):         # for j spanning indices of x
                if isinstance(x[j], list) or isinstance(x[j], tuple):  # checks if any of the elements                
                    print(i, j, "list")# are lists or tuples
                    return True, i, j
                else:
                    print(i, j, "not a list")
        return False
    else:
        print("list of length 1")
        return False




#input, matrix A rows i, j and nonzero c
#output, c * Ri + Rj \rightarrow Rj, the second Rj in this expressesion
def rowadd(A, i, j, c):
    Ri = row(A, i)
    Rj = row(A, j)
    n = len(Ri)
    for i in range(n):
        Rj[i] = c * Ri[i] + Rj[i]
    return Rj
    

Y = [[1, 2, 3], 
    [4, 5, 6], 
    [7, 8, 9]]
    
# print( rowadd(Y, 0, 1, -4 ), 'rowadd' )

def rowswap(A, i, j):
    n = len( A[i] )
    for k in range(n):
        t = A[i][k]
        A[i][k] = A[j][k]
        A[j][k] = t
    return A





# detects if a matrix has a row of zeros and if it is the zero matrix
# input: A, matrix 
# output: number of zero rows
def detect_zeros(A):
    m = len(A)
    n = len(A[0])
    count = [0 for _ in range(n)]
    count_zeros = [0 for _ in range(m)]
    for i in range(m):
        for j in range(n):
            if A[i][j] == 0:
                count[j] = 1
            else:
                break
        if sum(count) == n:
            count_zeros[i] = 1
    if sum( count_zeros ) == m:
        return 'zero matrix'
    elif 1 in count_zeros:
        return 'non-zero matrix with', sum(count_zeros), 'zero rows'
    else: 
        return 'nonzero matrix'

E1 = [[1, 2, 3], [1, 1, 1], [0, 0, 0]]   

print(detect_zeros(E1))

A = [[1, 2, 3],                        
    [4, 5, 6], 
    [7, 8, 9]]
print(detect_zeros(A))






def gaussian_elim(A): # gets scale factors for ith column
    if  matrix(A) == True and detect_list(A) == False:
        m = len(A)      # store number of sublists in A (rows)
                        #if matrix(A) == True and detect_list(A) == False and len(b) == m:       # checks if list is matrix compatible, there are no order higher than 2 of list of lists and the length of b is length of A
        n = len(A[0])       # store the number of columns of A
        C = [ [0 for _ in range(n)] for _ in range(m) ]      # initailizes a list of lists of all zeros 
        for i in range(n):              # arbitrary column       
            
            k = 0                       # counter
            for j in range(i, m - 1):   # row from i, i + 1, ..., m - 2
                if A[j - k][i] != 0:    # the pivot position is non-zero // j - k is constant in this loop   
                    t = A[j - k][i]     # store pivot
                    C[j + 1][i] = - (A[j + 1][i] / t)               # calculate factor
                    A = rowadd( A, j - k, j + 1, C[j + 1][i])       # perform row op
                    k = k + 1                                       # add to counter
                else: 
                    o = 0
                    for p in range(n):
                        if A[j - k][p] == 0:
                            o = o + 1
                        else:
                            break
                    if o == n:
                        for q in range(j - k + 1, m):
                            a = 0
                            for r in range(n):
                                if A[q][r] == 0:
                                    a = a + 1
                            if a == n:
                                print('row', q, 'is all zeros')
                            
                        #return gaussian_elim(A)
                    else:
                        A = rowswap(A, j - k, o)
                        #return gaussian_elim(A)
                    print('pivot was zero')
            
        return A
    else:
        return "please input a matrix"
    


A = [[1, 2, 3],                               #works, result in REF
    [4, 5, 6], 
    [7, 8, 9]]
print(gaussian_elim( A ))

B = [[1, 2, 3, 4],                           # works
    [5, 6, 7, 8],
    [9, 10, 11, 12]]
print(gaussian_elim( B ), "B")

C = [[1, 2, 3], [4, 5, 6], [7,8, 9], [10, 11, 12]]      # works
print(gaussian_elim( C ))

D = [[1, 1, 0], [1, 0, 1], [0, 1, 1]]           # works
print(gaussian_elim( D ), "D")

E = [[0, 0, 0], [1, 1, 1], [1, 2, 3]]           # matrix NOT in REF
print(gaussian_elim( E ))                       
E1 = [[1, 2, 3], [1, 1, 1], [0, 0, 0]]          # works
print(gaussian_elim( E1 ), "E1")

