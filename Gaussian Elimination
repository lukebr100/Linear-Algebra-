

def column(A, i):                  # function, input: A list, element to access i
    return [sublist[i] for sublist in A]   # list comprehension





# input: list of lists
# output: if the list can be realized as a matrix (string)
def matrix(A):
    n = len(A)                      # n is the number of sublists in A
    x = [0] * (n - 1)               # x is a list of n - 1 zeros
                                    
                                    # loop to compare length of 1st sublist to every other sublist
    for j in range(1, n):           # j goes from 1, 2, ..., n - 1
        if len(A[0]) == len(A[j]):  # compare 
            x[j - 1] = 1            # store value 1 into (j - 1)st entry of list x
            
                                    # loop to count number of entries that are 1
    counter = 0                     # intiailze a counter
    for j in range(n - 1):              # j goes from 0, 1, ..., n - 1
        counter = counter + x[j]    # store counter plus x[j] into counter 
                                    # end loop
                                    
        
    if counter == n - 1:                # if total number of equal length sublists in x                                              # is the number of sublists of A
        return True
    else:               
        return False
        
        
        
        
        
        
        
def detect_list(L):
    if len(L) != 1:
        for i in range(len(L)):             # every sublist of L
            x = L[i]                        # x is ith subslist of L
            for j in range(len(x)):         # for j spanning indices of x
                if isinstance(x[j], list) or isinstance(x[j], tuple):  # checks if any of the elements                
                    print(i, j, "list")# are lists or tuples
                    return True
                
        return False
    else:
        print("list of length 1")
        return False
        
        
        
        
        
        
 # function to perform row operations
# inputs: A matrix interpretted list
# i, j are rows (sublists) of A and
# c is a non-zero constant such that
# R_i(c) + R_j \rightarrow R_j
def rowops(A, i, j, c):
    n = len( A[i] )       # number of columns of A
    for k in range(n):    # for arbitary column k
        A[j][k] = c * A[i][k] + A[j][k]     # A[j] row j is now c times row i A[i] plus row j A[j]
    return A

Y = [[1, 2, 3], 
    [4, 5, 6], 
    [7, 8, 9]]
    
print(rowops(Y, 0, 1, -4 ) )
        
        
        
        
        
        
def gaussian_elim(A): # gets scale factors for ith column
    if  matrix(A) == True and detect_list(A) == False:
        m = len(A)      # store number of sublists in A (rows)
                        #if matrix(A) == True and detect_list(A) == False and len(b) == m:       # checks if list is matrix compatible, there are no order higher than 2 of list of lists and the length of b is length of A
        n = len(A[0])       # store the number of columns of A
        C = [[0 for _ in range(n)] for _ in range(m) ]      # initailizes a list of lists of all zeros 
        for i in range(n):                 
            
            k = 0
            for j in range(i, m - 1):
                if A[j - k][i] != 0:
                    t = A[j - k][i]
                    C[j + 1][i] = - (A[j + 1][i] / t)
                    k = k + 1
                else: #print("needs a row swap (Gaussian Elimination w/ partial pivoting coming soon!")
                    print('pivot was zero')
                    
                
            l = 0
            for j in range(i, m - 1):
                A = rowops( A, j - l, j + 1, C[j + 1][i])
                l = l+1
            
        return A
    else:
        return "please input a matrix"
    
    
A = [[1, 2, 3], 
    [4, 5, 6], 
    [7, 8, 9]]
print(gaussian_elim( A ))

B = [[1, 2, 3, 4], 
    [5, 6, 7, 8],
    [9, 10, 11, 12]]
print(gaussian_elim( B ))

C = [[1, 2, 3], [4, 5, 6], [7,8, 9], [10, 11, 12]]
print(gaussian_elim( C ))

D = [[1, 1, 0], [1, 0, 1], [0, 1, 1]]
print(gaussian_elim( D ))

E = [[0, 0, 0], [1, 1, 1], [1, 2, 3]]
print(gaussian_elim( E ))
E1 = [[1, 2, 3], [1, 1, 1], [0, 0, 0]]
print(gaussian_elim( E1 ))
