# not working properly-in progress

def gauss_jordan(A, b):
    # input A R^{m x n} list
    # input b R^{m x 1} list
    # solving Ax = b for x in R^{n x 1}
    n = len(b) - 1 # rows
    m = len(A[1][:]) - 1  # cols
    C = [[0]*m]*n # initailtize C m x n list of all zeros, C matrix will get filled with the non-zero scalar factor in R_{j - 1}(C) + R_{j} \rightarrow R_{j} Elementary row operation 
# if  the ijth entry of A is non-zero and it is not the last
    for i in range(n): # arbitrary row
        for j in range(m): # go through cols of arbitrary row
            C[i + 1][j] = -(A[i + 1][j] / A[i][j]) # calculate 
            A[i + 1][j] = A[i][j] * C[i + 1][j] + A[i + 1][j]
                     # store scalar factor
                # execute code to make A[i + 1] == 0
            b[i + 1][0] = C[i + 1][j] * b[i][0] + b[i + 1][0] # keep track what happens in b
    return A, b
    
    
A = [[1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12]]
b = [[13], 
    [14],
    [15]]
print(gauss_jordan(A, b))
